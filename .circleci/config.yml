# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
commands:
  print_pipeline_id:
    description: "A command to print the pipeline id"
    parameters:
      id:
        type: string
        default: "No id passed"
    steps:
      - run: echo << parameters.id >>
jobs:
  show_pipeline_id:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id:
          id: $CIRCLE_WORKFLOW_ID

  print_hello:
    docker:
      - image: alpine:latest
    steps:
      - run: echo Hello
  
  save_hello_world_output:
    docker:
      - image: alpine:latest
    steps:
      - run: echo "Hello World" > hello_world.txt
      - persist_to_workspace:
          root: .
          paths:
            - hello_world.txt
  
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: .
      - run: cat hello_world.txt

  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo World
  print_name:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: "echo the environmental variable that is part of the project"
          command: |
            echo $ENV_NAME
  
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name my-stack
  
  configure_servers:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e9:4a:60:92:1c:5a:57:2e:3d:5d:b6:8e:f2:61:7d:b6"
      - run:
          name: install dependencies
          command: |
            apk add --update ansible
      - run:
          name: configure the server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml
  fail_on_purpose:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - run: return 1
        - run: 
            name: run when build fails
            command: echo "Hello Error"
            when: on_fail
# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - configure_servers
      # - welcome/run
      # - fail_on_purpose
      # - show_pipeline_id
      # - save_hello_world_output
      # - print_output_file:
      #     requires:
      #       - save_hello_world_output